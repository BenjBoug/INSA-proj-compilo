/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	creation : 13 fevrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka implements Constantes {

    public static Declaration decl;
    public static TabIdent tabIdent;
    public static Expression expr;
    public static YVMasm yvm;
    public static String nomVarTemp="";

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      tabIdent = new TabIdent();
      decl = new Declaration(tabIdent);
      expr = new Expression(tabIdent);
      analyseur = new Yaka(input);
      yvm = new YVMasm(args[args.length-1]);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu,opLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots reserves*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENT: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < TRUE: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FALSE : "FAUX">
| <FAIT : "FAIT">
| <OR : "OU">
| <AND : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> {yvm.entete();} <ident>
   (declFonction())*	
   <PRINCIPAL>
   bloc()
   <FPRINCIPAL>{tabIdent.ecrireDebug();tabIdent.videLocaux();}
   <FPROGRAMME>
   {yvm.queue();}
   
}

void bloc() : {}{
 (declConst())*
 (declVar())* {yvm.ouvrePrinc(tabIdent.nombreVariable()*2);}		
   suiteInstr() 
}

void declFonction() : {}
{
	type() <FONCTION> <ident> {tabIdent.ajouteFonction(YakaTokenManager.identLu);} paramForms()
	bloc()
	<FFONCTION> {tabIdent.ecrireDebug();tabIdent.videLocaux();}
}

void paramForms() : {}
{
	"(" 
		(
		paramForm() 
		
		("," paramForm())*
		
		)? 
	")"
}

void paramForm() : {}
{
	type() <ident> {System.out.println(tabIdent.typeRetour);tabIdent.ajoutParam(YakaTokenManager.identLu);}
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> 	  	
   "=" valConst()
    
}

void valConst() : {String id = YakaTokenManager.identLu;}
{
  <entier> {
  decl.ajoutConstEntier(id,YakaTokenManager.entierLu); 
  yvm.iconst(YakaTokenManager.entierLu);
  } 		
 | <ident> {
 decl.ajoutConstIdent(id,YakaTokenManager.identLu);
 yvm.iconst(tabIdent.chercheIdent(id).getValeur());
 } 		
 | <TRUE> {
 decl.ajoutConstBool(id,VRAI);
 yvm.iconst(VRAI);
 }		
 | <FALSE> {
 decl.ajoutConstBool(id,FAUX);
 yvm.iconst(FAUX);
 }		
}


void declVar() : {}
{
  <VAR> type()	
  <ident>	{
  decl.ajoutVariable(YakaTokenManager.identLu);
  }	
  ("," 
      <ident> {
      decl.ajoutVariable(YakaTokenManager.identLu);
      }	 
  )* ";"
}

void type() :{}
{
   <ENT> 	{decl.definirTypeVar(ENTIER);tabIdent.setTypeRetour(ENTIER);}		
 | <BOOLEEN>	{decl.definirTypeVar(BOOLEAN);tabIdent.setTypeRetour(BOOLEAN);}	
}
/*
 * Syntaxe des instructions.
 */
void suiteInstr() : {}
{
	instruction()	(";"	  
	  (instruction())?	)*
}

void instruction() : {}{
	affectation() | lecture() | ecriture() | boucle() | condition() | retourne()}

void retourne() : {}
{
	<RETOURNE> expression()
}

/*
 *affectation
 */
void affectation() : {}
{	 <ident>	 { nomVarTemp = YakaTokenManager.identLu;}	   "=" expression()
	 {yvm.istore(tabIdent.valeurIdent(nomVarTemp));
	 expr.controleAffectation(nomVarTemp);}}

void lecture() : {}{	<LIRE> "(" <ident> ")"
	{	  yvm.lireEnt(tabIdent.valeurIdent(YakaTokenManager.identLu));
	}
}
void ecriture()  : {}
{	<ECRIRE> "(" (expression() {if (expr.getSommetTypes() == Constantes.BOOLEAN) {yvm.ecrireBool();}else{yvm.ecrireEnt();}} | {yvm.ecrireChaine(YakaTokenManager.chaineLue);} <chaine>) ")" | <ALALIGNE> {yvm.aLaLigne();}
	
}

/*
 * It�ration
 */

void boucle() : {}{	< TANTQUE > {yvm.tantque();} expression() {expr.testExprBool();} < FAIRE > {yvm.iffaux();}  suiteBoucle()
}
void suiteBoucle() : {}
{
	suiteInstr() < FAIT > {yvm.fait();}
}

/*
 * conditionnelle
 */
/*\ ATTENTION: conditionnelle a redéfinir, probleme  avec les étiquettes de iffaux quand il y a un bloc sinon   */
void condition() : {}
{
	< SI > {yvm.si();} expression(){expr.testExprBool();} < ALORS >  {yvm.iffaux();} suiteInstr() {yvm.sinon();} suiteCondi()  }
void suiteCondi() : {}
{
	< FSI >  {yvm.fsi();} | sinonCondi()
}
void sinonCondi() : {}
{
	< SINON > suiteInstr() < FSI > {yvm.fsi();}
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {yvm.operation(expr.getSommetOp());
  expr.operation();}
  )?
}

void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()	{
   yvm.operation(expr.getSommetOp());
   expr.operation();
   }
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()	{
	yvm.operation(expr.getSommetOp());
  expr.operation();
    }
  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {yvm.operation(expr.getSommetOp());expr.operation();} 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> {
  expr.empilerEnt(YakaTokenManager.entierLu); 
  yvm.iconst(YakaTokenManager.entierLu);
  } 		
 | <ident> 
	 {
		 Ident i = tabIdent.chercheIdent(YakaTokenManager.identLu);
		 if (i.getVarOrConst() == Ident.CONST) {
		 	yvm.iconst(i.getValeur());
		 	expr.empilerIdent(YakaTokenManager.identLu);
		 } else if (i.getVarOrConst() == Ident.VAR) {
		 	yvm.iload(i.getValeur());
		 	expr.empilerIdent(YakaTokenManager.identLu);
		 }else if (i.getVarOrConst() == Ident.FONC) {
		 	//fonc YVM
		 }
		 
	 } 	
 
 	(argumentsFonction())?
 	
 | <TRUE> {
 expr.empilerBool(VRAI);
 yvm.iconst(VRAI);
 }		
 | <FALSE> {
 expr.empilerBool(FAUX);
 yvm.iconst(FAUX);
 }	
}

void argumentsFonction() : {}
{
	"(" (expression() ("," expression())*)? ")"
}

void opRel() : {}
{
   "=" 	{expr.empilerOperation(EGAL);}	
 | "<>" {expr.empilerOperation(NEGAL);}		
 | "<" 	{expr.empilerOperation(INF);}		
 | "<=" {expr.empilerOperation(INFEG);}		
 | ">" 	{expr.empilerOperation(SUP);}		
 | ">=" {expr.empilerOperation(SUPEG);}		
} 

void opAdd() : {}
{
    "+"	{expr.empilerOperation(PLUS);}		
  |  "-"  {expr.empilerOperation(MOINS);}	
  | <OR> 	{expr.empilerOperation(OU);}	
}

void opMul() : {}
{
  "*"	{expr.empilerOperation(MUL);}		
  | "/"		{expr.empilerOperation(DIV);}	
  | <AND>	{expr.empilerOperation(ET);}	
} 

void opNeg() : {}
{ "-" {expr.empilerOperation(NEG);}	
 | <NON>
 {expr.empilerOperation(NOT);}	

}


